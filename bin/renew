#!/bin/bash

set -e

VAULT_HOST=$(dig active.vault.service.consul | grep CNAME | sed -E 's/.*CNAME\s+([^ ]+)\.$/\1/')
export VAULT_ADDR=https://$VAULT_HOST:8200

export VAULT_TOKEN=$(vault write \
  -tls-skip-verify \
  -format=json \
  auth/$CLUSTER_NAME/k8s/login \
  role=$VAULT_ROLE \
  jwt=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) |
  jq -r ".auth.client_token"
  )

ACCESS_KEY=$(vault write \
  -tls-skip-verify \
  -format=json \
  $CLUSTER_NAME/aws/sts/letsencrypt-vault-manager \
  ttl=60m)
export AWS_SECRET_ACCESS_KEY=$(echo $ACCESS_KEY | jq -r '.data.secret_key')
export AWS_ACCESS_KEY_ID=$(echo $ACCESS_KEY | jq -r '.data.access_key')
export AWS_SESSION_TOKEN=$(echo $ACCESS_KEY | jq -r '.data.security_token')

export HOSTED_ZONE_ID=$(vault read \
  -tls-skip-verify \
  -field=hosted_zone_id \
  secret/certbot)

PREVIOUS_DOMAIN=$(redirect_subdomain \
  $HOST \
  $(vault read -tls-skip-verify -field=host secret/certbot) |
  jq -r '.ResourceRecords[0].Value'
  )

ARCHIVES_PATH=/root/archives

mkdir -p /etc/letsencrypt/archive
mkdir -p /etc/letsencrypt/renewal
mkdir -p /etc/letsencrypt/live

function get_source_filename() {
  host=$1
  filename=$2
  vault read -tls-skip-verify -field=$filename secret/certs/$host > /tmp/$filename
  for file in /etc/letsencrypt/archive/$host/*
  do
    diff $file /tmp/$filename 2>&1 >/dev/null
    if [ $? -eq 0 ]
    then
      basename $file
      return
    fi
  done
}

to_redirect_back=()
to_redirect_to=()
target_domain=$(vault read -tls-skip-verify -field=host secret/certbot)
function redirect_if_needed() {
  host_to_redirect=$1

  notAfter=$(openssl x509 -noout -in /etc/letsencrypt/live/$host_to_redirect/fullchain.pem -enddate)
  ttl=$(echo "$notAfter" | python /root/ttl.py) # certficate ttl in seconds
  if [ $ttl -lt 2592000 ]; then # 30 days (letsencrypt default renewal ttl)
    to_redirect_back+=$host_to_direct
    to_redirect_to+=$(redirect_subdomain \
      $host_to_redirect \
      $target_domain |
      jq -r '.ResourceRecords[0].Value')
  fi
}

function save_cert() {
  host_to_save=$1

  mkdir -p $ARCHIVES_PATH

  rm $ARCHIVES_PATH/$host_to_save.tar.gz* || true

  pushd /etc/letsencrypt/archive

  tar cvzf $ARCHIVES_PATH/$host_to_save.tar.gz $host_to_save
  base64 $ARCHIVES_PATH/$host_to_save.tar.gz > $ARCHIVES_PATH/$host_to_save.tar.gz.b64

  vault write -tls-skip-verify secret/certs/$host_to_save \
    privkey.pem=@/etc/letsencrypt/live/$host_to_save/privkey.pem \
    fullchain.pem=@/etc/letsencrypt/live/$host_to_save/fullchain.pem \
    chain.pem=@/etc/letsencrypt/live/$host_to_save/chain.pem \
    cert.pem=@/etc/letsencrypt/live/$host_to_save/cert.pem \
    renewal=@/etc/letsencrypt/renewal/$host_to_save.conf \
    archive=@/root/archives/$host_to_save.tar.gz.b64 \
    ttl=$(openssl x509 -enddate -noout \
      -in /etc/letsencrypt/live/$host_to_save/fullchain.pem | python /root/ttl.py)s

  popd
}

vault list -tls-skip-verify -format=json secret/certs | jq -r '.[]' | while read host
do
  if [ -d /etc/letsencrypt/live/$host ]
  then
    redirect_if_needed $host
    continue
  fi
  vault read -tls-skip-verify -field=archive secret/certs/$host > /root/$host.tar.gz.b64
  vault read -tls-skip-verify -field=renewal secret/certs/$host > /etc/letsencrypt/renewal/$host.conf
  base64 --decode /root/$host.tar.gz.b64 > /root/$host.tar.gz
  cd /etc/letsencrypt/archive
  tar xvzf /root/$host.tar.gz
  mkdir -p /etc/letsencrypt/live/$host
  cd /etc/letsencrypt/live/$host
  ln -s ../../archive/$host/$(get_source_filename $host privkey.pem) privkey.pem
  ln -s ../../archive/$host/$(get_source_filename $host fullchain.pem) fullchain.pem
  ln -s ../../archive/$host/$(get_source_filename $host chain.pem) chain.pem
  ln -s ../../archive/$host/$(get_source_filename $host cert.pem) cert.pem
  redirect_if_needed $host
done

echo "Sleeping 30 seconds for the records to be correctly set in aws..."
sleep 30

certbot-auto renew

vault list -tls-skip-verify -format=json secret/certs | jq -r '.[]' | while read host
do
  save_cert $host
done

for i in {1..${#to_redirect_back}}
do
  host=${to_redirect_back[$i]}
  target=${to_redirect_to[$i]}
  if [[ "$target" != "" ]]; then
    redirect_subdomain $host $target
  fi
done

#!/bin/bash

set -e

HOST=$1
VAULT_HOST=$(dig active.vault.service.consul | grep CNAME | sed -E 's/.*CNAME\s+([^ ]+)\.$/\1/')
export VAULT_ADDR=https://$VAULT_HOST:8200
VAULT_CERTS_PATH=${VAULT_CERTS_PATH:="secret/certs/env"}

export VAULT_TOKEN=$(vault write \
  -tls-skip-verify \
  -format=json \
  auth/$CLUSTER_NAME/k8s/login \
  role=$VAULT_ROLE \
  jwt=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) |
  jq -r ".auth.client_token"
  )

ACCESS_KEY=$(vault write \
  -tls-skip-verify \
  -format=json \
  $CLUSTER_NAME/aws/sts/letsencrypt-vault-manager \
  ttl=15m)
export AWS_SECRET_ACCESS_KEY=$(echo $ACCESS_KEY | jq -r '.data.secret_key')
export AWS_ACCESS_KEY_ID=$(echo $ACCESS_KEY | jq -r '.data.access_key')
export AWS_SESSION_TOKEN=$(echo $ACCESS_KEY | jq -r '.data.security_token')

export HOSTED_ZONE_ID=$(vault read \
  -tls-skip-verify \
  -field=hosted_zone_id \
  secret/certbot)

target=$(vault read -tls-skip-verify -field=host secret/certbot)
echo "Redirecting $HOST to $target"
PREVIOUS_DOMAIN=$(redirect_subdomain \
  $HOST \
  $target |
  jq -r '.ResourceRecords[0].Value'
  )
echo "Previous target is $PREVIOUS_DOMAIN"

echo "Sleeping 30 seconds for the records to be correctly set in aws..."
sleep 30

ARCHIVES_PATH=/root/archives

certbot-auto \
  certonly \
  -n \
  --webroot \
  --webroot-path /usr/share/nginx/html \
  -d $HOST \
  -m $(vault read -tls-skip-verify -field=email secret/certbot) \
  --agree-tos

cd /etc/letsencrypt/archive

function save_cert() {
  host_to_save=$1

  mkdir -p $ARCHIVES_PATH

  rm $ARCHIVES_PATH/$host_to_save.tar.gz* || true

  pushd /etc/letsencrypt/archive

  tar cvzf $ARCHIVES_PATH/$host_to_save.tar.gz $host_to_save
  base64 $ARCHIVES_PATH/$host_to_save.tar.gz > $ARCHIVES_PATH/$host_to_save.tar.gz.b64

  vault write -tls-skip-verify $VAULT_CERTS_PATH/$host_to_save \
    privkey.pem=@/etc/letsencrypt/live/$host_to_save/privkey.pem \
    fullchain.pem=@/etc/letsencrypt/live/$host_to_save/fullchain.pem \
    chain.pem=@/etc/letsencrypt/live/$host_to_save/chain.pem \
    cert.pem=@/etc/letsencrypt/live/$host_to_save/cert.pem \
    renewal=@/etc/letsencrypt/renewal/$host_to_save.conf \
    archive=@/root/archives/$host_to_save.tar.gz.b64 \
    ttl=$(openssl x509 -enddate -noout \
      -in /etc/letsencrypt/live/$host_to_save/fullchain.pem | python /root/ttl.py)s

	if [[ "$host_to_save" == "www.ubble.ai" ||
		"$host_to_save" == "web.ubble.ai" ||
		"$host_to_save" == "janus.ubble.ai" ]]; then
		vault write -tls-skip-verify secret/certs/$host_to_save \  # hardcoded path ...
			privkey.pem=@/etc/letsencrypt/live/$host_to_save/privkey.pem \
			fullchain.pem=@/etc/letsencrypt/live/$host_to_save/fullchain.pem
	fi

  popd
}

save_cert $HOST

if [[ "$PREVIOUS_DOMAIN" != "" ]]; then
  redirect_subdomain $HOST $PREVIOUS_DOMAIN
fi
